import com.github.jk1.license.render.*

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.1.2'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
        classpath 'xalan:xalan:2.7.2'
        classpath 'gradle.plugin.org.aim42:htmlSanityCheck:1.1.3'
	classpath 'com.github.jk1:gradle-license-report:1.7'
    }
}

apply plugin: 'de.undercouch.download'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.aim42.htmlSanityCheck'
apply plugin: 'com.github.jk1.dependency-license-report'

asciidoctor {
    sourceDir file("$projectDir/src/docs")
    outputDir = new File("$buildDir/asciidoc")
    sources {
        include 'user/ProActiveUserGuide.adoc'
        include 'JobPlanner/JobPlannerUserGuide.adoc'
        include 'MLOS/MLOSUserGuide.adoc'
        include 'PCW/PCWUserGuide.adoc'
        include 'PCA/PCAUserGuide.adoc'
        include 'admin/ProActiveAdminGuide.adoc'
        include 'admin/AdminTutorials.adoc'
        include 'admin/Catalog.adoc'
        include 'index.adoc'

    }
    resources {
        from("$projectDir/src/docs/") {
            include 'user/examples/**'
            include 'images/**'
            include 'tocbot/**'
            include 'highlight/**'
        }
    }
}

asciidoctorj {
    version = '1.5.3'
}

htmlSanityCheck {
    sourceDir = new File( "$buildDir/asciidoc/html5" )

    // where to put results of sanityChecks...
    checkingResultsDir = new File( "$buildDir/report/htmlchecks" )

    // fail build on errors?
    failOnErrors = false

}

licenseReport {
    configurations = ['asciidoctor']
    renderers = [new InventoryHtmlReportRenderer()]
}


project.ext.branch = new File("$projectDir/src/docs/version-conf.js").text.split("'")[1]
if (project.ext.branch.endsWith("-SNAPSHOT")) {
    project.ext.branch = 'master'
}

def getDate() {
    def currentDate = new Date()
    def formattedDateString = currentDate.format('yyyy-MM-dd')
    
    if(project.ext.branch == 'master'){
        formattedDateString = currentDate.format('yyyy-MM-dd HH:mm:ss')
    }
    
    return formattedDateString
}

task copyDocs(type: Copy) {
    def dateString = getDate()
    from ("$projectDir/src/docs/") {
        include 'version-conf.js'
        filter { line ->
            line.replace('date: \'\'', 'date: \''+dateString+'\'')
        }
    }
    into "$buildDir/asciidoc/html5"
}

task removeProperties(type: Delete) {
    delete fileTree(dir: "$projectDir/src/docs/admin/references/properties/")
}

import de.undercouch.gradle.tasks.download.Download

task downloadRmProperties(type: Download) {
    src "https://raw.githubusercontent.com/ow2-proactive/scheduling/${project.branch}/config/rm/settings.ini"
    dest file("$projectDir/src/docs/admin/references/properties/rm.properties")
}

task downloadSchedulerProperties(type: Download) {
    src "https://raw.githubusercontent.com/ow2-proactive/scheduling/${project.branch}/config/scheduler/settings.ini"
    dest file("$projectDir/src/docs/admin/references/properties/scheduler.properties")
}

task downloadSchedulerWebProperties(type: Download) {
    src "https://raw.githubusercontent.com/ow2-proactive/scheduling/${project.branch}/config/web/settings.ini"
    dest file("$projectDir/src/docs/admin/references/properties/scheduler-web.properties")
}

task downloadCatalogProperties(type: Download) {
    src "https://raw.githubusercontent.com/ow2-proactive/catalog/${project.branch}/src/main/resources/application.properties"
    dest file("$projectDir/src/docs/admin/references/properties/catalog.properties")
}

task xsdDoc(type: JavaExec) {
    println file("$projectDir/src/xsd/schedulerjob.xsd").absoluteFile

    inputs.files file("$projectDir/src/xsd/schedulerjob.xsd"), file("$projectDir/src/xsd/xs3p.xsl")
    outputs.files file("$buildDir/html5/user/schedulerjob.html")

    classpath buildscript.configurations.classpath
    main 'org.apache.xalan.xslt.Process'
    args '-IN', 'src/xsd/schedulerjob.xsd', '-XSL', 'src/xsd/xs3p.xsl', '-OUT', "$buildDir/asciidoc/html5/user/schedulerjob.html"
}

copyDocs.dependsOn removeProperties
downloadRmProperties.dependsOn copyDocs
downloadSchedulerProperties.dependsOn downloadRmProperties
downloadSchedulerWebProperties.dependsOn downloadSchedulerProperties
downloadCatalogProperties.dependsOn downloadSchedulerWebProperties
asciidoctor.dependsOn downloadCatalogProperties
htmlSanityCheck.dependsOn asciidoctor
xsdDoc.dependsOn htmlSanityCheck

build.dependsOn(['xsdDoc'])
defaultTasks 'clean', 'build'
